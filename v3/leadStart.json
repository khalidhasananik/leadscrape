{
  "name": "Lead Start (async)",
  "nodes": [
    {
      "id": "wh-start",
      "name": "Webhook: /lead/start",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [-700, 0],
      "parameters": {
        "httpMethod": "POST",
        "path": "lead/start",
        "responseMode": "responseNode",
        "options": {
          "responseHeaders": {
            "entries": [
              { "name": "Cache-Control", "value": "no-store" },
              { "name": "Access-Control-Allow-Origin", "value": "*" }
            ]
          },
          "cors": {
            "credentials": false,
            "enabled": true,
            "methods": "GET,POST,OPTIONS",
            "origins": ["*"]
          }
        }
      }
    },
    {
      "id": "normalize",
      "name": "Normalize Input",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-430, 0],
      "parameters": {
        "assignments": {
          "assignments": [
            { "name": "name",      "type": "string", "value": "={{$json.body.name || ''}}" },
            { "name": "company",   "type": "string", "value": "={{$json.body.company || ''}}" },
            { "name": "linkedin",  "type": "string", "value": "={{$json.body.linkedin || ''}}" },
            { "name": "requestId", "type": "string", "value": "={{$json.body.requestId || $execution.id}}" },
            { "name": "receivedAt","type": "string", "value": "={{$now}}" }
          ]
        }
      }
    },
    {
      "id": "respond-202",
      "name": "Respond 202 (Accepted)",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [-170, 0],
      "parameters": {
        "respondWith": "json",
        "responseCode": 202,
        "responseBody": "={{ { requestId: $json.requestId, status: 'accepted' } }}",
        "options": {
          "responseHeaders": {
            "entries": [
              { "name": "Cache-Control", "value": "no-store" },
              { "name": "Access-Control-Allow-Origin", "value": "*" }
            ]
          }
        }
      }
    },

    /* ---------- BEGIN: YOUR HEAVY WORK HERE (runs after 202) ---------- */
    {
      "id": "validate",
      "name": "Validate Input",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-430, 200],
      "parameters": {
        "jsCode": "const {name, company} = $json;\nif(!name || !company) {\n  return [{ ...$json, _validationError: 'Name and Company are required.' }];\n}\nreturn $input.all();"
      }
    },

    /* Replace the next placeholder Code node with your: Serper -> extract profile link -> Apify profile scrape (+last activity) -> web search for lead/company -> Flaresolverr/Extractor -> LLM â†’ final fields. Keep requestId available on the items. */
    {
      "id": "simulate-work",
      "name": "Simulate Work (Replace with real chain)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-170, 200],
      "parameters": {
        "jsCode": "/*\n  TODO: Replace this node with your real chain.\n  Build an object `data` containing EXACTLY the fields you currently return from Respond to Webhook1 in your old workflow:\n  - \"Last Activity\", \"Leads Summary\", \"Company Summary\",\n  - linkedinUrl, publicIdentifier, fullName, headline,\n  - connections, followers, email, mobileNumber, jobTitle,\n  - companyName, companyIndustry, companyWebsite, companyLinkedin,\n  - companyFoundedIn, companySize, currentJobDuration,\n  - topSkillsByEndorsements, addressWithoutCountry, about, experience, education\n  Then return [{ ...$json, data }].\n*/\nconst d = {\n  \"Last Activity\": \"\",\n  \"Leads Summary\": \"(placeholder)\",\n  \"Company Summary\": \"(placeholder)\",\n  \"linkedinUrl\": \"\",\n  \"publicIdentifier\": \"\",\n  \"fullName\": \"\",\n  \"headline\": \"\",\n  \"connections\": \"\",\n  \"followers\": \"\",\n  \"email\": \"\",\n  \"mobileNumber\": \"\",\n  \"jobTitle\": \"\",\n  \"companyName\": \"\",\n  \"companyIndustry\": \"\",\n  \"companyWebsite\": \"\",\n  \"companyLinkedin\": \"\",\n  \"companyFoundedIn\": \"\",\n  \"companySize\": \"\",\n  \"currentJobDuration\": \"\",\n  \"topSkillsByEndorsements\": \"\",\n  \"addressWithoutCountry\": \"\",\n  \"about\": \"\",\n  \"experience\": \"\",\n  \"education\": \"\"\n};\nreturn [{ ...$json, data: d }];"
      }
    },

    {
      "id": "assemble-result",
      "name": "Assemble Result JSON",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [120, 200],
      "parameters": {
        "mode": "keepKeyMatches",
        "assignments": {
          "assignments": [
            { "name": "requestId", "type": "string", "value": "={{$json.requestId}}" },
            { "name": "status",    "type": "string", "value": "complete" },
            { "name": "data",      "type": "json",   "value": "={{$json.data}}" }
          ]
        }
      }
    },

    /* Store by requestId -> value: data */
    {
      "id": "store",
      "name": "Data Store: Upsert Result",
      "type": "n8n-nodes-base.dataStore",
      "typeVersion": 1,
      "position": [380, 200],
      "parameters": {
        "operation": "upsert",
        "key": "={{$json.requestId}}",
        "value": "={{$json.data}}",
        "options": {
          "additionalFields": [
            { "fieldName": "createdAt", "fieldValue": "={{$now}}" }
          ]
        }
      }
    }

    /* ---------- END: YOUR HEAVY WORK HERE ---------- */
  ],
  "connections": {
    "Webhook: /lead/start": { "main": [[{ "node": "Normalize Input", "type": "main", "index": 0 }]] },
    "Normalize Input":      { "main": [[{ "node": "Respond 202 (Accepted)", "type": "main", "index": 0 }, { "node": "Validate Input", "type": "main", "index": 0 }]] },
    "Validate Input":       { "main": [[{ "node": "Simulate Work (Replace with real chain)", "type": "main", "index": 0 }]] },
    "Simulate Work (Replace with real chain)": { "main": [[{ "node": "Assemble Result JSON", "type": "main", "index": 0 }]] },
    "Assemble Result JSON": { "main": [[{ "node": "Data Store: Upsert Result", "type": "main", "index": 0 }]] }
  },
  "settings": {
    "executionOrder": "v1",
    "concurrency": 1,              /* recommended while refactoring batching */
    "saveExecutionProgress": true
  },
  "active": true
}
